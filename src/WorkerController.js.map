{"version":3,"file":"WorkerController.js","sourceRoot":"","sources":["WorkerController.ts"],"names":[],"mappings":"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","sourcesContent":["import { UpdatePortCommand, WorkerCommand, WorkerMessage } from './WorkerManager'\nimport { MessagePort, parentPort } from 'worker_threads'\nimport { SerDe } from 'serde-ts'\n\ntype FunctionWithArgs = (...args: any[]) => any\ntype FunctionWithoutArgs = () => any\n\nexport type HandlerFunction = FunctionWithArgs | FunctionWithoutArgs | any\n\nexport interface Handlers {\n  [key: string]: HandlerFunction\n}\n\nexport type HandlerArgs<T extends Handlers, K extends keyof T> = T[K] extends (...args: infer A) => any ? A : never\nexport type HandlerReturn<T extends Handlers, K extends keyof T> = T[K] extends (...args: any[]) => infer R ? R : never\n\ninterface CallRequestMessage<K extends keyof any> extends WorkerMessage {\n  type: 'functionCallRequest'\n  messageId: number\n  functionName: K\n  args: any[]\n}\n\ninterface CallResponseMessage<R> extends WorkerMessage {\n  type: 'functionCallResponse'\n  messageId: number\n  result: R\n  timeStamp: number\n}\n\nexport class WorkerController {\n  private static messageId = 0\n  private ports: Map<number, MessagePort> = new Map()\n  private responseHandlers: Map<number, (response: CallResponseMessage<any>) => void> = new Map()\n  private readonly handlers?: Handlers\n  private readonly usingSerialisation: boolean\n  private readonly boundHandleIncomingMessage: (message: WorkerCommand) => void\n  private selfId: number | undefined\n\n  constructor(handlers?: Handlers, usingSerialisation: boolean = true) {\n    this.handlers = handlers\n    this.usingSerialisation = usingSerialisation\n    this.boundHandleIncomingMessage = this.handleIncomingMessage.bind(this)\n\n    if (parentPort) {\n      parentPort.on('message', this.boundHandleIncomingMessage)\n    }\n  }\n\n  private static getNextMessageId(): number {\n    return ++this.messageId\n  }\n\n  getWorkersId() {\n    return [...this.ports.entries()].map((x) => x[0])\n  }\n\n  async call<C extends Handlers, K extends keyof C>(\n    workerId: number,\n    classType: { new(): C },\n    methodName: K,\n    ...args: Parameters<C[K]>\n  ): Promise<ReturnType<C[K]>> {\n    const messageId = WorkerController.getNextMessageId();\n    const port = this.ports.get(workerId);\n    if (!port) {\n      return Promise.reject(new Error('Port not found for worker ' + workerId));\n    }\n\n    return new Promise((resolve, reject) => {\n      // Регистрация обработчика ответа\n      const responseHandler = (response: CallResponseMessage<any>) => {\n        if (response.messageId === messageId) {\n          // Десериализация результата, если это необходимо\n          const result = this.usingSerialisation && response.result !== undefined\n            ? SerDe.deserialize(JSON.parse(response.result))\n            : response.result;\n          resolve(result);\n          this.responseHandlers.delete(messageId); // Удаление обработчика после его вызова\n        }\n      };\n\n      this.responseHandlers.set(messageId, responseHandler);\n\n      // Отправка запроса\n      const request: CallRequestMessage<K> = {\n        type: 'functionCallRequest',\n        messageId,\n        functionName: methodName,\n        args: this.usingSerialisation ? args.map((x) => SerDe.serialise(x)) : args,\n      };\n      port.postMessage(request);\n    });\n  }\n\n  public id() {\n    return (this.selfId ?? -1).toString()\n  }\n\n  private async handleIncomingMessage(message: WorkerCommand): Promise<void> {\n    if (message.type === 'updatePort') {\n      const updatePortMessage = message as UpdatePortCommand\n      this.handleUpdatePort(updatePortMessage.workerId, updatePortMessage.port)\n      this.acknowledge(message.commandId)\n    } else if (message.type === 'run' && this.handlers) {\n      await this.handlers['run']()\n      this.acknowledge(message.commandId)\n    } else if (message.type === 'selfId') {\n      this.selfId = message.workerId\n      this.acknowledge(message.commandId)\n    }\n  }\n\n  private acknowledge(commandId: number) {\n    parentPort?.postMessage(<WorkerMessage>{ type: 'acknowledge', workerId: this.selfId, commandId })\n  }\n\n  private handleUpdatePort(workerId: number, port: MessagePort): void {\n    this.ports.set(workerId, port)\n    port.on('message', this.handleIncomingMessageFromPort.bind(this, workerId))\n  }\n\n  private async handleIncomingMessageFromPort(workerId: number, message: WorkerMessage): Promise<void> {\n    if (message.type === 'functionCallRequest') {\n      const functionCallRequest = message as CallRequestMessage<keyof Handlers>\n      const handler = this.handlers ?\n          this.handlers[functionCallRequest.functionName] : undefined\n      if (handler) {\n        let args = this.usingSerialisation\n          ? functionCallRequest.args.map((x) => SerDe.deserialize(x))\n          : functionCallRequest.args\n        const result = await handler(...args)\n        console.time('serialise')\n        let toSend = this.usingSerialisation ? JSON.stringify(SerDe.serialise(result)) : result\n        console.timeEnd('serialise')\n        this.ports.get(workerId)?.postMessage(<CallResponseMessage<any>>{\n          type: 'functionCallResponse',\n          messageId: functionCallRequest.messageId,\n          result: toSend,\n          timeStamp: Date.now(),\n        })\n      }\n    }\n    if (message.type === 'functionCallResponse') {\n      const functionCallResponse = message as CallResponseMessage<any>\n      const handler = this.responseHandlers.get(functionCallResponse.messageId)\n      if (handler) {\n        handler(functionCallResponse)\n        // После вызова обработчика, его можно удалить\n        this.responseHandlers.delete(functionCallResponse.messageId)\n      }\n    }\n  }\n}\n\n"]}