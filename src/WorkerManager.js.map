{"version":3,"file":"WorkerManager.js","sourceRoot":"","sources":["WorkerManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { MessageChannel, MessagePort, Worker } from 'worker_threads'\r\n\r\nexport type WorkerMessageType =\r\n  | 'request'\r\n  | 'response'\r\n  | 'run'\r\n  | 'workerAdded'\r\n  | 'workerRemoved'\r\n  | 'acknowledge'\r\n  | 'updatePort'\r\n  | 'selfId'\r\n  | 'functionCall'\r\n  | 'functionResponse'\r\n  | 'functionCallRequest'\r\n  | 'functionCallResponse'\r\n\r\nexport interface WorkerMessage {\r\n  type: WorkerMessageType\r\n  workerId?: number\r\n}\r\n\r\nexport interface WorkerCommand extends WorkerMessage {\r\n  commandId: number\r\n}\r\n\r\nexport interface UpdatePortCommand extends WorkerCommand {\r\n  type: 'updatePort'\r\n  workerId: number\r\n  port: MessagePort\r\n}\r\n\r\nexport class WorkerManager {\r\n  private workers: Map<number, Worker> = new Map()\r\n  private nextId: number = 0\r\n  private nextCommandId: number = 0\r\n  private acknowledgementResolves: Map<number, () => void> = new Map()\r\n\r\n  async createWorker(workerFile: string): Promise<number> {\r\n    const workerId = this.nextId++\r\n    const worker = new Worker(workerFile)\r\n\r\n    // Установка постоянного обработчика сообщений для этого воркера\r\n    worker.on('message', (message: WorkerCommand) => {\r\n      if (message.type === 'acknowledge') {\r\n        const resolver = this.acknowledgementResolves.get(message.commandId)\r\n        if (resolver) {\r\n          resolver()\r\n          this.acknowledgementResolves.delete(message.commandId)\r\n        }\r\n      }\r\n\r\n      // Обработка других типов сообщений...\r\n    })\r\n\r\n    this.workers.set(workerId, worker)\r\n\r\n    // Синхронизация воркера с помощью самоидентификации и установки каналов связи\r\n    await this.sendCommand(workerId, 'selfId')\r\n    await this.setupMessageChannels(workerId)\r\n\r\n    return workerId\r\n  }\r\n\r\n  async sendCommand<T extends WorkerCommand>(\r\n    workerId: number,\r\n    type: WorkerMessageType,\r\n    params?: Omit<T, 'type' | 'commandId'>,\r\n  ): Promise<void> {\r\n    const worker = this.workers.get(workerId)\r\n    if (!worker) {\r\n      throw new Error('Worker not found')\r\n    }\r\n    let command = <WorkerCommand>{ type, workerId, commandId: this.getNextCommandId() }\r\n    if (params) command = Object.assign(command, params)\r\n\r\n    let promise = new Promise<void>((resolve) => {\r\n      this.acknowledgementResolves.set(command.commandId, resolve)\r\n    })\r\n\r\n    // Отправляем команду воркеру\r\n    // Регистрируем Promise, чтобы разрешить его, когда придет подтверждение\r\n    const isUpdatePortCommand = (command: any): command is UpdatePortCommand => {\r\n      return command.hasOwnProperty('port') && command.port instanceof MessagePort\r\n    }\r\n    worker.postMessage(command, isUpdatePortCommand(command) ? [command.port] : [])\r\n\r\n    return promise\r\n  }\r\n\r\n  public getNextCommandId() {\r\n    return this.nextCommandId++\r\n  }\r\n\r\n  async terminateWorker(workerId: number): Promise<void> {\r\n    const worker = this.workers.get(workerId);\r\n    if (worker) {\r\n      // Уведомляем другие воркеры о завершении этого воркера\r\n      await this.notifyWorkersAboutRemoval(workerId);\r\n\r\n      await worker.terminate();\r\n      this.workers.delete(workerId);\r\n    }\r\n  }\r\n\r\n  private async notifyWorkersAboutRemoval(workerId: number): Promise<void> {\r\n    const notifyPromises = [];\r\n\r\n    for (const [id, worker] of this.workers) {\r\n      if (id !== workerId) {\r\n        notifyPromises.push(this.sendCommand(id, 'workerRemoved', { workerId }));\r\n      }\r\n    }\r\n    await Promise.all(notifyPromises);\r\n  }\r\n\r\n  private async setupMessageChannels(newWorkerId: number): Promise<void> {\r\n    const ackPromises: Promise<void>[] = []\r\n    for (const [existingWorkerId, existingWorker] of this.workers) {\r\n      if (existingWorkerId !== newWorkerId) {\r\n        const { port1, port2 } = new MessageChannel()\r\n        ackPromises.push(\r\n          this.sendCommand<UpdatePortCommand>(existingWorkerId, 'updatePort', {\r\n            workerId: newWorkerId,\r\n            port: port2,\r\n          }),\r\n        )\r\n        ackPromises.push(\r\n          this.sendCommand<UpdatePortCommand>(newWorkerId, 'updatePort', {\r\n            workerId: existingWorkerId,\r\n            port: port1,\r\n          }),\r\n        )\r\n      }\r\n    }\r\n    await Promise.all(ackPromises)\r\n  }\r\n}\r\n"]}